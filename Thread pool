Thread pool

Need for thread pool:
creating newthread for each request that my server  recive usese system resourse and take extra time of creating and than frring the thread.
Also too may suuch request can lead low resourse of my server which in turn can faill the incomming request.Thus there is need to limit
the number of thread(That's why )

So, It's better to reuse the thread that you have created previously, rather creating new one.


we pass our *Runnuble task into thse thread and once this thread is free other can use it.


#################
Since active threads consume system resources, a JVM creating too many threads at the same time can cause the system to run out of memory. This necessitates the need to limit the number of threads being created.

What is ThreadPool in Java?

A thread pool reuses previously created threads to execute current tasks and offers a solution to the problem of thread cycle overhead and resource thrashing. Since the thread is already existing when the request arrives, the delay introduced by thread creation is eliminated, making the application more responsive.

Java provides the Executor framework which is centered around the Executor interface, its sub-interface â€“ExecutorService and the class-ThreadPoolExecutor, which implements both of these interfaces. By using the executor, one only has to implement the Runnable objects and send them to the executor to execute.

They allow you to take advantage of threading, but focus on the tasks that you want the thread to perform, instead of thread mechanics.

To use thread pools, we first create a object of ExecutorService and pass a set of tasks to it. ThreadPoolExecutor class allows to set the core and maximum pool size.The runnables that are run by a particular thread are executed sequentially


newFixedThreadPool(int)           Creates a fixed size thread pool.
newCachedThreadPool()             Creates a thread pool that creates new 
                                  threads as needed, but will reuse previously 
                                  constructed threads when they are available
newSingleThreadExecutor()         Creates a single thread.


--> Task will be presnts in the queue, and my thread pool will pick one of this runnable task if thread is avaialble
One of the main advantages of using this approach is when you want to process 100 requests at a time, but do not want to create 100 Threads for the same, so as to reduce JVM overload. You can use this approach to create a ThreadPool of 10 Threads and you can submit 100 requests to this ThreadPool. 
ThreadPool will create maximum of 10 threads to process 10 requests at a time.  After process completion of any single Thread, 
ThreadPool will internally allocate the 11th request to this Thread 
and will keep on doing the same to all the remaining requests.


How to implent thread pool:
---> creat singlton cllass((in Case I know maximum Thread tha I want to create) , and initilize the thread object firs time
---> I will use one task queue
--> one list of avialble thread and another list of busy thread and will switch between thread as per requirement.


Proper Implementaon of thread pool:--->
http://tutorials.jenkov.com/java-concurrency/thread-pools.html#:~:text=Pools%20in%20Java-,How%20a%20Thread%20Pool%20Works,one%20of%20them%20and%20executed.

for more details:
https://www.baeldung.com/thread-pool-java-and-guava


